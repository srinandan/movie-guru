# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 7200s # 2hr
tags:
  - ci

steps:
- name: "gcr.io/cloud-builders/docker"
  id: "build-frontend"
  waitFor: ['-']
  dir: './frontend'
  entrypoint: "bash"
  args:
    - "-c"
    - |
      docker build \
        --build-arg VITE_FIREBASE_API_KEY=$_VITE_FIREBASE_API_KEY \
        --build-arg VITE_FIREBASE_AUTH_DOMAIN=$_VITE_FIREBASE_AUTH_DOMAIN \
        --build-arg VITE_GCP_PROJECT_ID=$_VITE_GCP_PROJECT_ID \
        --build-arg VITE_FIREBASE_STORAGE_BUCKET=$_VITE_FIREBASE_STORAGE_BUCKET \
        --build-arg VITE_FIREBASE_MESSAGING_SENDERID=$_VITE_FIREBASE_MESSAGING_SENDERID \
        --build-arg VITE_FIREBASE_APPID=$_VITE_FIREBASE_APPID \
        --build-arg VITE_CHAT_SERVER_URL="$_VITE_CHAT_SERVER_URL" \
        -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:${_SHORT_SHA}" \
        -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:latest" \
        --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:latest" \
        .

- name: 'gcr.io/cloud-builders/docker'
  id: "push-frontend-image"
  waitFor: [build-frontend]
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker tag ${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:${_SHORT_SHA} \
        ${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:${_TAG_NAME}    
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:${_SHORT_SHA}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:${_TAG_NAME}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:latest'

- name: 'gcr.io/cloud-builders/docker'
  id: "build-server-image"
  waitFor: ['-']
  dir: './chat_server_go'
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker build \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:${_SHORT_SHA}" \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:latest" \
         --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:latest" \
         .

- name: 'gcr.io/cloud-builders/docker'
  id: "push-server-image"
  waitFor: [build-server-image]
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker tag "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:${_SHORT_SHA}" \
        "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:${_TAG_NAME}"
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:${_SHORT_SHA}' && \
      docker push "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:${_TAG_NAME}" && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:latest'

- name: 'gcr.io/cloud-builders/docker'
  id: "build-flows-image"
  waitFor: ['-']
  dir: './js/flows'
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker build \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:${_SHORT_SHA}" \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:latest" \
         --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:latest" \
         .
- name: 'gcr.io/cloud-builders/docker'
  id: "push-flows-image"
  waitFor: [build-flows-image]
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker tag '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:${_SHORT_SHA}' \
        '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:${_TAG_NAME}'
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:${_SHORT_SHA}'  && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:${_TAG_NAME}'  && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:latest'

- name: 'gcr.io/cloud-builders/docker'
  id: "build-mock-image"
  waitFor: ['-']
  dir: './js/mock-user'
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker build \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/mockuser:${_SHORT_SHA}" \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/mockuser:latest" \
         --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/mockuser:latest" \
         .
- name: 'gcr.io/cloud-builders/docker'
  id: "push-mock-image"
  waitFor: [build-mock-image]
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/mockuser:${_SHORT_SHA}'  && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/mockuser:latest'

- name: 'gcr.io/cloud-builders/docker'
  id: "build-db-init-image"
  dir: './pgvector'
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker build \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db-init:${_SHORT_SHA}" \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db-init:latest" \
         --build-arg PROJECT_ID="$_PROJECT_ID" \
         --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db-init:latest" \
         -f Dockerfile.init \
         .

- name: 'gcr.io/cloud-builders/docker'
  id: "push-db-init-image"
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker tag '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db-init:${_SHORT_SHA}' \
        '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db-init:${_TAG_NAME}'
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db-init:${_SHORT_SHA}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db-init:${_TAG_NAME}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db-init:latest'

- name: 'gcr.io/cloud-builders/docker'
  id: "build-gemma-prompt-image"
  dir: './gemma-prompts'
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker build \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/gemma-prompt:${_SHORT_SHA}" \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/gemma-prompt:latest" \
         --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/gemma-prompt:latest" \
         -f Dockerfile \
         .

- name: 'gcr.io/cloud-builders/docker'
  id: "push-gemma-prompt-image"
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker tag '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/gemma-prompt:${_SHORT_SHA}' \
        '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/gemma-prompt:${_TAG_NAME}'
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/gemma-prompt:${_SHORT_SHA}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/gemma-prompt:${_TAG_NAME}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/gemma-prompt:latest'

- name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
  id: "update-db-init-image"
  entrypoint: "gcloud"
  args:
  - run
  - jobs 
  - deploy 
  - db-init-job
  - --image=${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db-init:${_TAG_NAME} 
  - --project=${_PROJECT_ID} 
  - --region=${_REGION}

- name: 'gcr.io/cloud-builders/docker'
  id: "build-ollama-server-image"
  dir: './ollama-server'
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker build \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/ollama-gemma:${_SHORT_SHA}" \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/ollama-gemma:latest" \
         --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/ollama-gemma:latest" \
         -f Dockerfile \
         .

- name: 'gcr.io/cloud-builders/docker'
  id: "push-ollama-server-image"
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker tag '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/ollama-gemma:${_SHORT_SHA}' \
        '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/ollama-gemma:${_TAG_NAME}'
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/ollama-gemma:${_SHORT_SHA}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/ollama-gemma:${_TAG_NAME}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/ollama-gemma:latest'

substitutions:
  _REGION: $LOCATION
  _PROJECT_ID: $PROJECT_ID
  _SHORT_SHA: $SHORT_SHA
  _TAG_NAME: $TAG_NAME

options:
  logging: CLOUD_LOGGING_ONLY
  substitution_option: ALLOW_LOOSE
  dynamic_substitutions: true
  requestedVerifyOption: VERIFIED
