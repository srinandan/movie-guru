# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 7200s # 2hr
tags:
  - ci
steps:
- name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
  id: "download-config"
  entrypoint: "bash"
  args:
    - "-c"
    - |
      gsutil cp gs://fb-webapp-$PROJECT_ID/app-config.json /workspace/app-config.json

- name: "ubuntu"
  id: "set-env-vars"
  entrypoint: "bash"
  args:
    - "-c"
    - |
      apt-get update && apt-get install -y jq
      export $(jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | .[]' /workspace/app-config.json)
      env | grep -E "gatewayIP|appId|apiKey|authDomain|databaseURL|storageBucket|messagingSenderId|measurementId"

- name: 'gcr.io/cloud-builders/docker'
  id: "build-frontend-image"
  dir: './frontend'
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker build \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:${_SHORT_SHA}" \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:latest" \
         --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:latest" \
         .
- name: 'gcr.io/cloud-builders/docker'
  id: "push-frontend-image"
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:${_SHORT_SHA}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/frontend:latest'
- name: 'gcr.io/cloud-builders/docker'
  id: "build-server-image"
  dir: './chat_server_go'
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker build \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:${_SHORT_SHA}" \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:latest" \
         --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:latest" \
         .
- name: 'gcr.io/cloud-builders/docker'
  id: "push-server-image"
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:${_SHORT_SHA}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/chatserver:latest'

- name: 'gcr.io/cloud-builders/docker'
  id: "build-flows-image"
  dir: './js/flows'
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker build \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:${_SHORT_SHA}" \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:latest" \
         --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:latest" \
         .
- name: 'gcr.io/cloud-builders/docker'
  id: "push-flows-image"
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:${_SHORT_SHA}'  && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/flows:latest'

- name: 'gcr.io/cloud-builders/docker'
  id: "build-db-image"
  dir: './pgvector'
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker build \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db:${_SHORT_SHA}" \
         -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db:latest" \
         --cache-from "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db:latest" \
         .

- name: 'gcr.io/cloud-builders/docker'
  id: "push-db-image"
  entrypoint: "sh"
  args:
    - -xe 
    - -c
    - |
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db:${_SHORT_SHA}' && \
      docker push '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/movie-guru/db:latest'

# - name: "gcr.io/${_PROJECT_ID}/helm"
#   id: "deploy-helm-chart"
#   entrypoint: bash
#   dir: deploy/app/helm 
#   args:
#     - "-c"
#     - |
#        helm upgrade --install movieguru \
#         ./deploy/app/helm/movieguru \
#        --namespace movieguru \
#        --create-namespace \
#         --set PROJECT_ID=${_PROJECT_ID} \
#         --set IMAGE.TAG=${_SHORT_SHA} \
#         --set REGION=${_REGION} \
#         --set firebase.apikey=${apiKey} \
#         --set firebase.project_id=${_PROJECT_ID} \
#         --set firebase.auth.domain=${authDomain} \
#         --set firebase.storage.bucket=${storageBucket} \
#         --set firebase.messaging.senderid=${messagingSenderId} \
#         --set firebase.appId=${appId} \
#         --set gatewayIP=${gatewayIP} \
